//Simple Java RESTful web service to connect to Cassandra DB and Fetch the query results.

package com.test.assign1.status;
import java.util.Collection;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Host;
import com.datastax.driver.core.Metadata;
import com.datastax.driver.core.PlainTextAuthProvider;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
import java.math.*;
import java.text.DecimalFormat;
import javax.ws.rs.ext.ExceptionMapper;


@SuppressWarnings("unused")
@Path("/web")
public class Example1  {
@GET 
@Produces(MediaType.TEXT_HTML) 
public Response title(@QueryParam("Query") int Query) throws Exception {  
	//Row element1 = null;
	 String element1 = "";
	 String element3 = "";
	 String element5 = "";
	 String element7 = "";
	 String element8 = "";
	 String element10 = "";
	 String element12 = ""; 
	 String element14 = ""; 
	 String element16 = ""; 
	 int checker = 0;
	System.out.println("User input: " +Query);
	//Connection driver logic generated by instaclustr during the sign up and cluster creation ( Line 41 -54)
	final Cluster.Builder clusterBuilder = Cluster.builder()
		    .addContactPoints(
		      "ipaddress1", "ipaddress2", "ipaddress3") // 
		    .withLoadBalancingPolicy(DCAwareRoundRobinPolicy.builder().withLocalDc("AWS_VPC_US_WEST_2").build()) 
		    .withPort(----) // generated by Cassandra
		    .withAuthProvider(new PlainTextAuthProvider("username", "password"));
         
		try (final Cluster cluster = clusterBuilder.build()) {
		    final Metadata metadata = cluster.getMetadata();
		    System.out.printf("Connected to cluster: %s\n", metadata.getClusterName());
		    
		    for (final Host host: metadata.getAllHosts()) {
		        System.out.printf("Datacenter: %s; Host: %s; Rack: %s\n", host.getDatacenter(), host.getAddress(), host.getRack());
		    }
		    // Crime data is the table created in Cassandra Database.
		    Session session = cluster.connect("crimedata");
		    //Parameter value - Query = 1 - comes to this loop
		    if(Query == 1) {
		    	String query1 = "select \"Location_Block\" from crimedata where \"Hour\" >= 0 and \"Hour\" <=3 and \"Text_General_Code\" = 'Thefts' LIMIT 10 ALLOW FILTERING";  	
		    	ResultSet rs1 = session.execute(query1);
		    	 Collection<Row> rows1 = rs1.all();
				    for(Row element : rows1) {
				    	System.out.println(element);
				    	element1 = element1 + element + "<br>";
				    }
		    //Display the Query execution time for each session	    
		    String query5 = "select duration,parameters from system_traces.sessions";		
		    ResultSet rs5 = session.execute(query5);
		    Collection<Row> rows5 = rs5.all();
		    for(Row element9 : rows5) {
		    	System.out.println(element9);
		    	element10 = element10 + element9 + "<br>";
		    }
		    checker = 1;
		    }
		    //Parameter value - Query = 2 - comes to this loop
		    else if(Query == 2) {
		    	String query2 = "select \"Dc_Key\",\"Text_General_Code\" from crimedata where \"UCR_General\" = 1500 LIMIT 10 ALLOW FILTERING"; 	
		    	ResultSet rs2 = session.execute(query2);
		    	 Collection<Row> rows2 = rs2.all();
				    for(Row element2 : rows2) {
				    	System.out.println(element2);
				    	element3 = element3 + element2 + "<br>";
				    }
				    //Display the Query execution time for each session
				    String query6 = "select duration,parameters from system_traces.sessions";		
				    ResultSet rs6 = session.execute(query6);
				    Collection<Row> rows6 = rs6.all();
				    for(Row element11 : rows6) {
				    	System.out.println(element11);
				    	element12 = element12 + element11 + "<br>";
				    }	
				    checker = 1;
		    }
		    //Parameter value - Query = 3 - comes to this loop
		    else if(Query ==3 ) {
		    	
		    	String query3 = "select \"Dispatch_Date\" from crimedata where \"Location_Block\" = '5500 BLOCK N 5TH ST' LIMIT 10 ALLOW FILTERING"; 	
		    	ResultSet rs3 = session.execute(query3);
		    	Collection<Row> rows3 = rs3.all();
			    for(Row element4 : rows3) {
			    	System.out.println(element4);
			    	element5 = element5 + element4 + "<br>";
			    }
			    //Display the Query execution time for each session
			    String query7 = "select duration,parameters from system_traces.sessions";		
			    ResultSet rs7 = session.execute(query7);
			    Collection<Row> rows7 = rs7.all();
			    for(Row element13 : rows7) {
			    	System.out.println(element13);
			    	element14 = element14 + element13 + "<br>";
			    }	    
			    checker = 1;
		    }
		    //Parameter value - Query = 4 - comes to this loop
		    else if (Query == 4) {
		    	String query4 = "select \"Dispatch_Time\" from crimedata where \"Text_General_Code\" = 'Weapon Violations' LIMIT 10 ALLOW FILTERING";
		    	   ResultSet rs4 = session.execute(query4);
				    Collection<Row> rows4 = rs4.all();
				    for(Row element6 : rows4) {
				    	//System.out.println(element6);
				    	element7 = element6.toString();
				    	element7 = element7.replaceAll("Row|\\[|\\]", ""); 
				    	//System.out.println(element7);
				    	long val = Long.valueOf(element7).longValue();
				    	val = val / 1000000000;
				    	int seconds = (int) (val) % 60 ;
				    	String sec = new DecimalFormat("00").format(seconds);  
				    	int minutes = (int) ((val % (60*60)) / 60);
				    	String mins = new DecimalFormat("00").format(minutes);  
				    	int hours   = (int) ((val / (60*60)));
				    	String hrs = new DecimalFormat("00").format(hours);  
				    	element7 = hrs + ":" + mins + ":" + sec;
				    	element8 = element8 + element7 + "<br>";
				    	System.out.println(element7);
				    	//element7.replaceAll("Row", "");
				    }	
				    //Display the Query execution time for each session
				    String query8 = "select duration,parameters from system_traces.sessions";		
				    ResultSet rs8 = session.execute(query8);
				    Collection<Row> rows8 = rs8.all();
				    for(Row element15 : rows8) {
				    	System.out.println(element15);
				    	element16 = element16 + element15 + "<br>";
				    }	
				    checker = 1;
		    }
		    //Server Response - 400 - Bad request - Parameters out of range.
		    else 
		    	if (Query <= 0 || Query > 4){
		    		checker = 1;
		    	System.out.println("Enter the query scenario value from 1 to 4");
		    	String out = "<p>Bad Request<br>Enter the Query scenario value from 1 to 4</p>";	
		    	return Response.status(400).entity(out).build();
		    }
		    session.close();
		}
		// Server Error - HTTP 500 - Invalid user/password and other connectivity issues.
		catch(Exception e){
			//e.printStackTrace();
			 if (checker == 0) {
					System.out.println("Internal Server Error - Connection Failed");
					String out6 = "<p>Internal Server Error<br>Connection Failed</p>";
					return Response.status(500).entity(out6).build();
					
				}
		}
//Display the results in Browser		
		if(Query == 1)
		{
			String out1 = "<br><b>Connected to Cluster: assignment2</b><br><br>Query_Output1:<br>Location Block<br>" + element1.replaceAll("Row|\\[|\\]", "") + "<br><br>Query_Execution Time:<br>Duration(milliseconds),Query Parameters<br>" + element10.replaceAll("Row", "");	
			return Response.status(200).entity(out1).build();
		}
		else if (Query == 2)
		{
		 String out2 = "<br><b>Connected to Cluster: assignment2</b><br><br>Query_Output2:<br>Dc_Key, Crime Name<br>" + element3.replaceAll("Row|\\[|\\]", "") + "<br><br>Query_Execution Time:<br>Duration(milliseconds),Query Parameters<br>" + element12.replaceAll("Row", ""); 	
		
		 //return Response.ok(Response.Status.OK.getStatusCode()).entity(out2).build();
		 return Response.status(200).entity(out2).build();
		}
		else if (Query == 3)
		{
			String out3 = "<br><b>Connected to Cluster: assignment2</b><br><br>Query_Output3:<br>Dispatch date<br>" + element5.replaceAll("Row|\\[|\\]", "") + "<br><br>Query_Execution Time:<br>Duration(milliseconds),Query Parameters<br>" + element14.replaceAll("Row", ""); 
			return Response.status(200).entity(out3).build();
		}
		else if (Query == 4)
		{
		 String out4 = 	"<br><b>Connected to Cluster: assignment2</b><br><br>Query_Output4:<br>Dispatch Time<br>" + element8.replaceAll("Row", "") + "<br><br>Query_Execution Time:<br>Duration(milliseconds),Query Parameters<br>" + element16.replaceAll("Row", ""); 
		 return Response.status(200).entity(out4).build();
		}
		
		String out5 = "<p>Invalid Request</p>";
		return Response.status(500).entity(out5).build();
}

}


